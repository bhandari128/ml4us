%h2 Class02 Answer:
%h2 How to get started with Linux?

%p Now that we have Google, Linux is relatively easy to learn.

%p Usually when I interact with Linux, I type commands at it and then read what it tells me.

%p Usually this is an exchange of text.

%p Google is perfectly suited for text search.

%p If I am confused or need knowledge about Linux related information, I just send detailed English questions to Google.

%p Millions of others are doing the same.

%p As each year goes by, Google gets better and better at answering Linux questions.

%p If Google fails me, I take time to type up a direct, comprehensive question to stackoverflow or AskUbuntu.com.

%p I can offer some perspective on Linux which might speed your learning experience.

%p The way to start learning the operation of many types of systems is to list nouns and verbs.

%p I have fewer verbs than nouns so I list the verbs first:

%ul
  %li Create
  %li Copy
  %li List
  %li Update
  %li Delete
  %li Install

%p Those are the big 6, but we will encounter others.

%p To understand my point here I will combine the first verb with a noun in a sentence:

%p In Linux, I Create (that's the verb) a Folder (that's the noun) like this:
.syntax
  %pre
    %code.bash mkdir myfolder

%p So, to get started with Linux I need to memorize how to operate on about 10 nouns with about 6 verbs which is about 60 commands.

%p That should be easier to learn than a foreign language which has a huge vocabulary and a complex grammar.


%p For computers in general I start with these nouns:

%ul
  %li
    %a(href='#disk') Disk
  %li
    %a(href='#cpu') Cpu
  %li
    %a(href='#ram') Ram
  %li
    %a(href='#network') Network
  %li
    %a(href='#user') User
  %li
    %a(href='#software') Software Packages
  %li
    %a(href='#security') Security
  %li
    %a(href='#display') Display

%p For Linux, and the above nouns, I interact with Disk the most often.

%p#disk I sub-divide the Disk-noun like this:

%ul
  %li Disk
  %li Volume
  %li File-System
  %li Folder
  %li File
  
%p Folder and File capture 99% more of my attention than Disk, Volume, and File-System.

%p For Folder, I list Verb-Noun examples below:

%ul

  %li
    Create Folder
    .syntax
      %pre
        %code.bash
          mkdir myFolder
          mkdir -p ~/anotherFolder/urFolder/someFolder/theirFolder
          mkdir /problemFolder
          mkdir /tmp/notaproblemFolder

  %li
    Copy Folder
    .syntax
      %pre
        %code.bash
          rsync -av myFolder ~/anotherFolder/urFolder
          cp -R myFolder /tmp/notaproblemFolder
  %li
    List Folder
    .syntax
      %pre
        %code.bash
          ls myFolder
          ls -la myFolder
          ls -la ~
          ls -la /tmp
          ls -la /tmp/
          ls -la /
          file /usr
          du -sh /usr
          df -h /usr
  %li
    Update Folder
    .syntax
      %pre
        %code.bash
          chmod 777 myFolder
          chmod 755 myFolder
          chmod 700 myFolder
          touch myFolder

  %li
    Delete Folder (Remove Folder)
    .syntax
      %pre
        %code.bash
          rmdir  myFolder
          rm -rf myFolder
  
  %li
    Move Folder
    .syntax
      %pre
        %code.bash
          mv ~/anotherFolder/urFolder/myFolder ~
          mv ~/myFolder /tmp
  %li
    Move myself to Folder
    .syntax
      %pre
        %code.bash
          cd /tmp
          cd /
          cd ~
  
  %li
    List where I am
    .syntax
      %pre
        %code.bash pwd

%p For File, I list Verb-Noun examples below:

%ul
  %li
    Create File (Be careful of vi)
    .syntax
      %pre
        %code.bash
          touch myFile
          date > thatFile
          date > file2.txt
          cat thatFile file2.txt > file3.txt
          vi    file3.txt
          emacs file3.txt
          nano  file3.txt
          gedit file3.txt
          
  %li
    Copy File
    .syntax
      %pre
        %code.bash
          cp thatFile urFile
          cp -p urFile theirFile
          cp thatFile /tmp/
          cp thatFile /tmp/aFile.txt
        
  %li
    List File
    .syntax
      %pre
        %code.bash
          cat thatFile
          ls thatFile
          ls -l thatFile
          ls -l /tmp/aFile.txt
          ls -l /tmp/aFile.txt thatFile
          file /bin/bash
          du -sh /bin/bash
             
  %li
    Update File
    .syntax
      %pre
        %code.bash
          touch thatFile
          chmod 666 thatFile
          chmod 755 thatFile
          chmod 644 thatFile
          chmod 600 thatFile
          date > thatFile
          date >> thatFile
          echo Dan Was Here >> thatFile
          sed -i '/Dan/s/Dan/Daniel/' thatFile
          vi    thatFile
          emacs thatFile
          nano  thatFile
          gedit thatFile       
  %li
    Delete File (Remove File)
    .syntax
      %pre
        %code.bash
          rm thatFile
          rm -f otherFile
   
  %li
    Move File
    .syntax
      %pre
        %code.bash
          mv /tmp/aFile.txt /tmp/ibeenMoved.txt

%p For File-System, I list Verb-Noun examples below:
%ul
  %li
    List File-System
    .syntax
      %pre
        %code.bash
          df -h
          df -h .
          df -h /
          df -h /home
          df -h /tmp

%p That wraps up the discussion about what I call the Disk-nouns.

%p I skipped discussing Disks and Volumes; Linux beginners rarely operate on Disks and Volumes.

%p#cpu For Linux, the next set of nouns are what I call the CPU-nouns:
%ul
  %li CPU-info
  %li process

%p For CPU-info, I list one Verb-Noun combination below:
%ul
  %li
    List CPU-info
    .syntax
      %pre
        %code.bash
          lspci
          lshw
          cat /proc/cpuinfo
          
%p For process, I list some Verb-Noun combinations below:
%ul
  %li
    List processes
    .syntax
      %pre
        %code.bash
          ps -ef | sort
          top
          vmstat 6 6
          gnome-system-monitor
  %li
    Delete Process
    .syntax
      %pre
        %code.bash
          kill 20162017
          kill -9 20162017
          
%p#ram On Linux, after Disk-nouns and CPU-nouns, I am interested in RAM.

%p Usually I want to list RAM usage:
%ul
  %li
    List RAM
    .syntax
      %pre
        %code.bash
          gnome-system-monitor

%p#network On Linux, after RAM, I am interested in Network-nouns:  
%ul
  %li Public Interface
  %li Private Interface
  %li IP-Address
  %li Netmask
  %li DNS-Address
  %li Connected (True, False)
  %li Configuration (DHCP or Manual)

%p For the above Network-nouns, usually the only verb I am interested in is: List.
%ul
  %li
    List Interfaces
    .syntax
      %pre
        %code.bash ifconfig

  %li
    List IP-Addresses
    .syntax
      %pre
        %code.bash ifconfig

  %li
    List Netmask
    .syntax
      %pre
        %code.bash ifconfig

  %li
    List DNS-Address
    .syntax
      %pre
        %code.bash nmcli dev show 

  %li
    List Connected (True, False)
    .syntax
      %pre
        %code.bash ping google.com

  %li
    List Configuration (DHCP or Manual)
    .syntax
      %pre
        %code.bash nm-connection-editor

%p#user On Linux, after Network-nouns, I am interested in User-nouns:

%ul
  %li User
  %li Super-User

%p For the above User-nouns, I list some Verb-Noun examples below:

%ul
  %li
    Create User
    .syntax
      %pre
        %code.bash
          sudo useradd -m -s /bin/bash -G sudo bob
          sudo passwd bob
  %li
    Create Postgres User
    .syntax
      %pre
        %code.bash
          sudo apt-get install postgresql
          sudo passwd postgres
  %li
    List User
    .syntax
      %pre
        %code.bash
          cat /etc/passwd
          ls -l ~
          ls -l ~bob
          ls -l /root

  %li
    Update User
    .syntax
      %pre
        %code.bash
          sudo passwd bob
          echo 'export PATH=/home/bob/anaconda3/bin:${PATH}' >> ~bob/.bashrc
          usermod -G sudo ann
  %li
    Delete User
    .syntax
      %pre
        %code.bash
          sudo userdel bob
          sudo rm -rf /home/bob

%p#software On Linux, after User-nouns, I am interested in Software-Package-nouns.

%p For Software-Package-nouns, I list some Verb-Noun examples below:

%ul
  %li
    Update Packages
    .syntax
      %pre
        %code.bash sudo apt-get update
  %li
    Upgrade Packages
    .syntax
      %pre
        %code.bash sudo apt-get upgrade
        
  %li
    Install Packages
    .syntax
      %pre
        %code.bash sudo apt-get install aptitude
                
  %li
    List Packages
    .syntax
      %pre
        %code.bash
          aptitude search perl5
          aptitude search perl6
          aptitude search perl7

%p Any software which is installed with apt-get (or aptitude) should behave well.

%p I see that software as permanently attached to my Linux instance.

%p Also I see that software as owned by root and shared by all users in the instance.

%p Three types of software which I want constrained to a specific user and not shared are listed below:

%ul
  %li Python
  %li Ruby
  %li Java

%p Syntax to install bob's copy of Python is listed below:
.syntax
  %pre
    %code.bash
      sudo useradd -m -s /bin/bash bob
      sudo passwd bob
      ssh -AY bob@localhost
      wget http://repo.continuum.io/archive/Anaconda3-4.1.1-Linux-x86_64.sh
      bash Anaconda3-4.1.1-Linux-x86_64.sh
      mv anaconda3/bin/curl anaconda3/bin/curl_ana
      echo 'export PATH=${HOME}/anaconda3/bin:$PATH' >> ~/.bashrc
      bash
      python

          
%p Syntax to install bob's copy of Ruby 2.3.1 is listed below:
.syntax
  %pre
    %code.bash ssh -AY bob@localhost
    =render 'class01ova2'

%p
  To install Java, bob needs to download jdk-8u102-linux-x64.tar.gz from Oracle:
%p
  %a(href='http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html' target='x')
    http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
  

%p Syntax to install bob's copy of Java is listed below:
.syntax
  %pre
    %code.bash
      ssh -AY bob@localhost
      tar zxf ~/Downloads/jdk-8u102-linux-x64.tar.gz
      ln -s jdk1.8.0_102 jdk
      echo 'export JAVA_HOME=${HOME}/jdk'       >> ~/.bashrc
      echo 'export PATH=${JAVA_HOME}/bin:$PATH' >> ~/.bashrc
      bash
      java -version

%p#security On Linux, after Software-nouns, I am interested in Security-nouns:

%ul
  %li login
  %li password
  %li user-permissions
  %li group-permissions
  %li public-permissions
  %li sudo
  %li su
  %li ssh-folder
  %li public key
  %li private key
  %li pem key
  %li authorized_keys
  %li key permissions
  %li iptables-firewall
  %li openssh-server

%p For Security-nouns, I list some Verb-Noun examples below:

%ul
  %li
    Authenticate bob to login security
    .syntax
      %pre
        %code.bash
          ssh -AY bob@localhost
  %li
    List users logged in
    .syntax
      %pre
        %code.bash w
  %li
    Exit bob login
    .syntax
      %pre
        %code.bash exit
  %li
    Create my new password
    .syntax
      %pre
        %code.bash passwd
  %li
    Create new password for bob
    .syntax
      %pre
        %code.bash sudo passwd bob
  %li
    Update new password for bob
    .syntax
      %pre
        %code.bash sudo passwd bob
  %li
    List Permissions of /home/bob/
    .syntax
      %pre
        %code.bash ls -la /home/bob/
  %li
    List Permissions of /home/bob/.bashrc
    .syntax
      %pre
        %code.bash ls -la /home/bob/.bashrc
  %li
    Create All Permissions of /home/bob/.bashrc
    .syntax
      %pre
        %code.bash chmod 777 /home/bob/.bashrc
  %li
    Delete All Permissions of /home/bob/.bashrc
    .syntax
      %pre
        %code.bash chmod 000 /home/bob/.bashrc
  %li
    Create Proper Permissions of /home/bob/.bashrc
    .syntax
      %pre
        %code.bash chmod 644 /home/bob/.bashrc
  %li
    Update /home/bob/ to disable public readable
    .syntax
      %pre
        %code.bash chmod 750 /home/bob/
  %li
    Update /home/bob/ to disable group readable
    .syntax
      %pre
        %code.bash chmod 700 /home/bob/
  %li
    Update /home/bob/ to disable bob readable
    .syntax
      %pre
        %code.bash chmod 000 /home/bob/
  %li
    Update /home/bob/ to enable bob writeable and readable
    .syntax
      %pre
        %code.bash chmod 700 /home/bob/
  %li
    Update /home/bob/jdk/bin/java to disable bob executable
    .syntax
      %pre
        %code.bash chmod 644 /home/bob/jdk/bin/java
  %li
    Update /home/bob/jdk/bin/java to enable bob executable
    .syntax
      %pre
        %code.bash chmod 744 /home/bob/jdk/bin/java
  %li
    Update /home/bob/jdk/bin/java to enable public executable
    .syntax
      %pre
        %code.bash chmod 755 /home/bob/jdk/bin/java

%p Linux always has a user named root who has many privileges.

%p I can use sudo to ask root to run commands for me.

%p In that case sudo is a verb.

%p If root does what I ask then I have sudo privilege and in that case sudo is a noun.

%p If I want to give sudo privilege to bob I should run a command like this:
    .syntax
      %pre
        %code.bash sudo usermod -G sudo bob




%p
  %a(href='class02l10')
    Top
    
%p
  %a(href='class02')
    Class02
